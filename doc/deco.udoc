# Created with CodeGrinder by Gindar <gindar@zamraky.cz>
@page deco
@lang javascript

@name Metody elementu
@description Metody, jimiž je odekorován element
@prefix element.


Největší část této knihovny se věnuje odekorování elementu užitečnými metodami.
Odekorovaní provádí [JAX.$] nebo [JAX.$$].




@def animate( time, what, start, end, method="LINEAR", endcallback=null )
	@note
		Tato metoda zamyká element.
	@warning
		Tato metoda vyžaduje JAK.CSSInterpolator. Soubor jax-all.js obsahuje vždy funkční verzi.
	<p>
		Metoda slouží k animaci CSS vlastností. Je třeba zadat *time* v
		milisekundách a co se bude animovat *what* (viz níže). Další
		potřebnou informací je v jakém rozsahu hodnot animace proběhne *start* - *end*.
	</p>
	<p>
		Parametry *start* a *end* je vhodné zadávat i s jednotkou ( např.: "100px", "20%" ) nebo ve vhodném formátu ( color: "#ff0000" ).
		U některých délkových vlastností se jednotka nemusí uvádět a pak se použije "px". ( které to jsou lze zjistit v poli JAX._animatePXUnits )
		Pokud je parametr *start* zadán jako <i>null</i> pak se zkouší najít hodnota nastavená na elementu (pomocí JAK.DOM.getStyle ) - používat s rozvahou.
	</p>

	<h4>Příklady animovatelných vlastností</h4>
	<table>
		<tr><th width="200">vlastnost</th><th>hodnoty</th></tr>
		<tr><td>width</td><td>"100px", "200px"</td></tr>
		<tr><td>opacity</td><td>0.0, 1.0</td></tr>
		<tr><td>backgroundColor</td><td>"#000000", "#ff0000"</td></tr>
	</table>
	Lze animovat teoreticky jakoukoli CSS vlastnost, stačí znát její správný název :)

	<h4>Příklad</h4>
	@example
		// animuje vysku elementu 10-100px po dobu 500ms
		elm.animate( 500, "height", "10px", "100px" )
		// animuje vysku od stavajici vysky po 100px
		elm.animate( 500, "height", null, "100px" )
		// animuje vysku a sirku od stavajici vysky a sirky po 100px
		elm.animate( 500, "width", null, "100px" ).animate( 500, "height", null, "100px" )




@def animateStop( what=null )
	<p>
		Zastavuje běžící animace. Pokud je zadán *what* zastaví jen animaci dané vlastnosti.
	</p>

	<h4>Příklad</h4>
	@example
		// animace vysky a sirky; animace sirky se stopne
		elm.animate( 500, "height", "10px", "100px" )
		elm.animate( 500, "width", "10px", "100px" )
		elm.animateStop( "height" )




@def delay( time )
	<div class="note">Tato metoda <a href="#section1">zamyká element</a>.</div>
	<p>
		Na zadaný čas <b>time</b> "zamkne" volání dalších metod. Neovlivňuje
		další delay nebo metodu [element.animate].
	</p>
	<h4>Příklad</h4>
	<div class="example">
		// za 5 sekund skryje element<br>
		element.delay( 5000 ).hide()
	</div>



@def callFunction( func )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Volá zadanou funkci <b>func</b> s argumentem elm jež se rovná danému elementu.
	</p>
	<h4>Příklad</h4>
	<div class="example">
		// po uplynuti 500ms zmeni barvu textu v elementu na cervenou<br>
		element.delay(500).callFunction(function(elm){ elm.style.color = "#f00" })
	</div>



@def addElement( def, attrs )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Metoda vytvoří potomka daného elementu dle zadaných parametrů. Více u [JAX.make].
	</p>
	<h4>Příklad</h4>
	<div class="example">
		// v elementu vytvori div s className="trida" a innerHTML="Text"<br>
		element.addElement("div.trida",{html:"Text"})
	</div>


@def nextNode( query )
	<div class="note">Tato metoda se nedá použít pro [JAX.HTMLCollection].</div>
	<p>
		Metoda hledá nejbližší element za aktuálním elementem vyhovující zadané *query*.
	</p>
	<h4>Příklad</h4>
	<div class="example">
		// vraci neblizsi div.trida<br>
		element.nextNode( "div.trida" )
	</div>

@def prevNode( query )
	<div class="note">Tato metoda se nedá použít pro [JAX.HTMLCollection].</div>
	<p>
		Stejná metoda jako [element.nextNode] jen hledá před elementem.
	</p>


@def addClass( cls, ... )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Přidá elementu třídu <b>cls</b>.
	</p>
	<div class="note">Od verze 1.15 lze předat libovolný počet argumentů. Všechny zadané třídy budou přidány.</div>

@def removeClass( cls, ... )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Odebere elementu třídu <b>cls</b>.
	</p>
	<div class="note">Od verze 1.15 lze předat libovolný počet argumentů. Všechny zadané třídy budou odstraněny.</div>

@def hasClass( cls )
	<div class="note">Tato metoda se nedá použít pro [JAX.HTMLCollection].</div>
	<p>
		Vrací true pokud má element třídu <b>cls</b>.
	</p>




@def listen( type, callback_obj, callback_method )
	alias pro [element.event]
@def event( type, callback_obj, callback_method )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Navěsí na element posluchač události <b>type</b>. <br>
		Callback lze zadat dvěma způsoby:<br>
			&nbsp;&nbsp;&nbsp;&nbsp;element.event( "click", this.method.bind(this) )<br>
			&nbsp;&nbsp;&nbsp;&nbsp;element.event( "click", this, "method" )<br>
		<b>Metoda vrací ID posluchače události.</b>
	</p>
	<p>
		Další argumenty funkce jsou předány callbacku.
	</p>
	<h4>Příklad</h4>
	<div class="example">
		function func( e, elm, arg1, arg2 ){<br>
		&nbsp;&nbsp;&nbsp;&nbsp;// arg1 == 666<br>
		&nbsp;&nbsp;&nbsp;&nbsp;// arg2 == { "a": "Test" }<br>
		}<br>
		// naveseni posluchace<br>
		element.event( "click", func, false, 666, { "a": "Test" } )
	</div>

@def removeEvent( type )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Odstraní posluchače daného typu <b>type</b> události.
	</p>
	<h4>Příklad</h4>
	<div class="example">
		element.event( "click", func )<br>
		element.removeEvent( "click" )

		var eid = element.event( "click", func )<br>
		JAK.Events.removeListener( eid );
	</div>


@def modify( attrs )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Změni element pomocí fce [JAX.modify].
	</p>
	<h4>Příklad</h4>
	<div class="example">
		element.modify( { "style": { "color": "#f00" } } )
	</div>



@def append( elements , time=0 )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Appenduje do elementu prvky z pole <b>elements</b>. Místo pole lze
		zadat jen jeden prvek, pak funguje jako klasický appendChild.<br>
		Pokud je zadán čas v ms <b>time</b> pak se vložení elementů animuje
		(opacity 0.0-1.0).
	</p>


@def remove( time=0 )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Odstraní element ze svého rodiče.<br>
		Pokud je zadán čas v ms <b>time</b> pak se odstranění elementu animuje
		(opacity 1.0-0.0).
	</p>

@def removeNodes( query )
	@note
		Novinka ve verzi 1.17.
	Odstraní potomky elementu filtrované dle zadané *query*.

	@example
		JAX.$(".someclass").removeNodes( "div" ) // odstrani vsechny potomky <div>
		JAX.$(".someclass").removeNodes( ".classname" ) // odtrani vsechny potomky se tridou .classname
		JAX.$(".someclass").removeNodes( "div.classname *" ) // odstrani vsechny potomky divů se tridou classname
		JAX.$(".someclass").removeNodes( "*" ) // odstrani vsechny potomky

@def storeValue( key, value )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Uloží do vlastnosti elementu hodnotu <b>value</b> pod zadaný klíč <b>key</b>. Hodnota může být cokoli.
	</p>

@def restoreValue( key, default_value=null )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<div class="note">Tato metoda se nedá použít pro [JAX.HTMLCollection].</div>
	<p>
		Vrací uloženou hodnotu podle daného klíče <b>key</b>. Pokud není klíč nalezen vrací <b>default_value</b>.
	</p>

@def toggle( [ time ] )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Přepíná zobrazení elementu. Parametr <b>time</b> slouží k animaci. Využívá element.show/hide více tam.
	</p>

@def show( time=0, target_opacity=1.0, inline=false )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Zobrazí element - nastaví .style.display na "block" nebo ( pokud je argument inline == true ) na "inline".<br>
		Pokud je zadán argument <b>time</b> pak se zobrazení animuje ( opacity 0.0 - 1.0 ), lze nastavit maximální
		hodnotu opacity argumentem <b>target_opacity</b>.
	</p>

@def hide( time=0 )
	<div class="note">Tato metoda může být blokována <a href="#section1">zámkem</a>.</div>
	<p>
		Funguje přesně opačně než [element.show].
	</p>

@def getRect( meter_in_dom=false )
	<p>
		Tato metoda vrací objekt obsahujicí informace o poloze a velikosti elementu. Je-li volitelný argument
		<b>meter_in_dom</b> == true pak se bude velikost elementu měřit v místě kde je - budou na něj aplikována CSS pravidla z rodiče. Více informací u [JAX.OffScreenMeter].
	</p>
	<div class="example">
		element.getRect() =&gt; {<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;"left": #,<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;"top": #,<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;"width": #,<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;"height": #<br/>
		}
	</div>



@section Zamykání elementu
<p>
	Některé metody umí po dobu svého běhu "zamknout" element. To znamená, že
	volání některých metod se pozdrží až doběhne "zámek". Metody jež jsou blokovány jsou označeny poznámkou.<br>
	<br>
	Toto zamykání dělají metody:
	<ul>
		<li>[element.animate]</li>
		<li>[element.delay]</li>
	</ul>
	A tyto metody zamykají pokud je u nich použita animace průhlednosti:
	<ul>
		<li>[element.show]</li>
		<li>[element.hide]</li>
		<li>[element.toggle]</li>
		<li>[element.append]</li>
		<li>[element.remove]</li>
	</ul>
</p>
<h4>Příklad</h4>
<div class="example">
	// probehne animace vysky 100-0px a po jejim ukonceni se element skryje<br>
	element.animate( 500, "height", "100px", "0px" ).hide()
</div>

