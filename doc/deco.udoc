# Created with CodeGrinder by Gindar <gindar@zamraky.cz>
@page deco
@lang javascript

@name Metody elementu
@description Metody, jimiž je odekorován element
@prefix element.


Největší část této knihovny se věnuje odekorování elementu užitečnými metodami.
Odekorovaní provádí [JAX.$] nebo [JAX.$$].




@def animate( time, what, start, end, method="LINEAR", endcallback= )
	@note
		Tato metoda <a href="#section1">zamyká element</a>.
	@warning
		Tato metoda vyžaduje JAK.CSSInterpolator. Soubor jax-all.js obsahuje vždy funkční verzi.
	Metoda slouží k animaci CSS vlastností. Je třeba zadat *time* v
	milisekundách a co se bude animovat *what* (viz níže). Další
	potřebnou informací je v jakém rozsahu hodnot animace proběhne *start* - *end*.
	Parametry *start* a *end* je vhodné zadávat i s jednotkou ( např.: "100px", "20%" ) nebo ve vhodném formátu ( color: "#ff0000" ).
	U některých délkových vlastností se jednotka nemusí uvádět a pak se použije "px". ( které to jsou lze zjistit v poli JAX._animatePXUnits )
	Pokud je parametr *start* zadán jako <i>null</i> pak se zkouší najít hodnota nastavená na elementu (pomocí JAK.DOM.getStyle ) - používat s rozvahou.
	<br><br>
	<b>Příklady animovatelných vlastností</b>
	@example
		width             "100px"    "200px"
		opacity           0.0        1.0
		backgroundColor   "#000000"  "#ff0000"
	Lze animovat teoreticky jakoukoli CSS vlastnost, stačí znát její správný název :)

	
	@example
		// animuje vysku elementu 10-100px po dobu 500ms
		elm.animate( 500, "height", "10px", "100px" )
		// animuje vysku od stavajici vysky po 100px
		elm.animate( 500, "height", null, "100px" )
		// animuje vysku a sirku od stavajici vysky a sirky po 100px
		elm.animate( 500, "width", null, "100px" ).animate( 500, "height", null, "100px" )




@def animateStop( what=null )
	Zastavuje běžící animace. Pokud je zadán *what* zastaví jen animaci dané vlastnosti.

	@example
		// animace vysky a sirky; animace sirky se stopne
		elm.animate( 500, "height", "10px", "100px" )
		elm.animate( 500, "width", "10px", "100px" )
		elm.animateStop( "height" )




@def delay( time )
	@note
		Tato metoda <a href="#section1">zamyká element</a>.
	Na zadaný čas <b>time</b> "zamkne" volání dalších metod. Neovlivňuje
	další delay nebo metodu [element.animate].
	@example
		// za 5 sekund skryje element
		element.delay( 5000 ).hide()



@def callFunction( func )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Volá zadanou funkci <b>func</b> s argumentem elm jež se rovná danému elementu.
	@example
		// po uplynuti 500ms zmeni barvu textu v elementu na cervenou
		element.delay(500).callFunction(function(elm){ elm.style.color = "#f00" })



@def addElement( def, attrs )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Metoda vytvoří potomka daného elementu dle zadaných parametrů. Více u [JAX.make].
	@example
		// v elementu vytvori div s className="trida" a innerHTML="Text"
		element.addElement("div.trida",{html:"Text"})



@def nextNode( query )
	@note
		Tato metoda se nedá použít pro [JAX.HTMLCollection].
	Metoda hledá nejbližší element za aktuálním elementem vyhovující zadané *query*.
	@example
		// vraci neblizsi div.trida
		element.nextNode( "div.trida" )


@def prevNode( query )
	@note
		Tato metoda se nedá použít pro [JAX.HTMLCollection].
	Stejná metoda jako [element.nextNode] jen hledá před elementem.


@def addClass( cls, ... )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Přidá elementu třídu <b>cls</b>.
	@note
		Od verze 1.15 lze předat libovolný počet argumentů. Všechny zadané třídy budou přidány.

@def removeClass( cls, ... )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Odebere elementu třídu <b>cls</b>.
	@note
		Od verze 1.15 lze předat libovolný počet argumentů. Všechny zadané třídy budou odstraněny.

@def hasClass( cls )
	@note
		Tato metoda se nedá použít pro [JAX.HTMLCollection].
	Vrací true pokud má element třídu <b>cls</b>.

@def listen( type, callback_obj, callback_method )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Navěsí na element posluchač události <b>type</b>.<br>
	Callback lze zadat dvěma způsoby:<br>
	@example
		element.event( "click", this.method.bind(this) )
		element.event( "click", this, "method" )
	<b>Metoda vrací ID posluchače události.</b>
	Další argumenty funkce jsou předány callbacku.
	
	@example
		function func( e, elm, arg1, arg2 ){
		    // arg1 == 666
		    // arg2 == { "a": "Test" }
		}
		// naveseni posluchace
		element.event( "click", func, false, 666, { "a": "Test" } )

@def event( type, callback_obj, callback_method )
	@note
		Použití této metody je nedoporučené. Bude zachována kvůli zpětné kompatibilitě ovšem 
	alias pro [element.listen]

@def removeEvent( type )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Odstraní posluchače daného typu <b>type</b> události.
	@example
		element.event( "click", func )
		element.removeEvent( "click" )

		var eid = element.event( "click", func )
		JAK.Events.removeListener( eid );



@def modify( attrs )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Změni element pomocí fce [JAX.modify].
	
	@example
		element.modify( { "style": { "color": "#f00" } } )




@def append( elements , time=0 )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Appenduje do elementu prvky z pole <b>elements</b>. Místo pole lze
	zadat jen jeden prvek, pak funguje jako klasický appendChild.
	Pokud je zadán čas v ms <b>time</b> pak se vložení elementů animuje
	(opacity 0.0-1.0).


@def remove( time=0 )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Odstraní element ze svého rodiče.
	Pokud je zadán čas v ms <b>time</b> pak se odstranění elementu animuje
	(opacity 1.0-0.0).

@def removeNodes( query )
	@note
		Novinka ve verzi 1.17.
	Odstraní potomky elementu filtrované dle zadané *query*.

	@example
		JAX.$(".someclass").removeNodes( "div" ) // odstrani vsechny potomky <div>
		JAX.$(".someclass").removeNodes( ".classname" ) // odtrani vsechny potomky se tridou .classname
		JAX.$(".someclass").removeNodes( "div.classname *" ) // odstrani vsechny potomky divů se tridou classname
		JAX.$(".someclass").removeNodes( "*" ) // odstrani vsechny potomky

@def storeValue( key, value )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	
	Uloží do vlastnosti elementu hodnotu <b>value</b> pod zadaný klíč <b>key</b>. Hodnota může být cokoli.

@def restoreValue( key, default_value=null )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	@note
		Tato metoda se nedá použít pro [JAX.HTMLCollection].
	Vrací uloženou hodnotu podle daného klíče <b>key</b>. Pokud není klíč nalezen vrací <b>default_value</b>.

@def toggle( [ time ] )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Přepíná zobrazení elementu. Parametr <b>time</b> slouží k animaci. Využívá element.show/hide více tam.

@def show( time=0, target_opacity=1.0, inline=false )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Zobrazí element - nastaví .style.display na "block" nebo ( pokud je argument inline == true ) na "inline".
	Pokud je zadán argument <b>time</b> pak se zobrazení animuje ( opacity 0.0 - 1.0 ), lze nastavit maximální
	hodnotu opacity argumentem <b>target_opacity</b>.

@def hide( time=0 )
	@note
		Tato metoda může být blokována <a href="#section1">zámkem</a>.
	Funguje přesně opačně než [element.show].

@def getRect( meter_in_dom=false )
	Tato metoda vrací objekt obsahujicí informace o poloze a velikosti elementu. Je-li volitelný argument
	*meter_in_dom* == true pak se bude velikost elementu měřit v místě kde je - budou na něj aplikována CSS pravidla z rodiče. Více informací u [JAX.OffScreenMeter].

	@example
		element.getRect() =&gt; {<br/>
		    "left": #,<br/>
		    "top": #,<br/>
		    "width": #,<br/>
		    "height": #<br/>
		}



@section Zamykání elementu
Některé metody umí po dobu svého běhu "zamknout" element. To znamená, že
volání některých metod se pozdrží až doběhne "zámek". Metody jež jsou blokovány jsou označeny poznámkou.

Toto zamykání dělají metody:
<ul>
	<li>[element.animate]</li>
	<li>[element.delay]</li>
</ul>
A tyto metody zamykají pokud je u nich použita animace průhlednosti:
<ul>
	<li>[element.show]</li>
	<li>[element.hide]</li>
	<li>[element.toggle]</li>
	<li>[element.append]</li>
	<li>[element.remove]</li>
</ul>

@example
	// probehne animace vysky 100-0px a po jejim ukonceni se element skryje
	element.animate( 500, "height", "100px", "0px" ).hide()


